rscript=paste0(rootdir,"/askSpeaker.R"),
schedule="WEEKLY",
starttime="08:21",
startdate="04/15/2021",
Rexe=file.path(Sys.getenv("R_HOME"),"bin","Rscript.exe")
)
### Stop running the code by running the following lines after the semester ends
taskscheduler_stop("ask_speaker")
taskscheduler_delete("ask_speaker")
library(gmailr)
library(googlesheets4)
library(rstudioapi)
# set directory to current folder
rootdir <- dirname(getSourceEditorContext()$path)
setwd(rootdir)
# first check if there is any seminar scheduled within the next 10 days & if paper title is empty
source("setGmailConfig.R")
help(taskscheduler_create)
help(environment)
environment()
.GlobalEnv
# master
### I will run this code in Windows
### If you want to run this code in Mac, use the package "cronR"
# load libraries
#install.packages(taskscheduleR)
library(taskscheduleR)
library(gmailr)
library(googlesheets4)
library(rstudioapi)
# set directory to current folder
rootdir <- dirname(getSourceEditorContext()$path)
setwd(rootdir)
### our applied micro seminar is every Wednesday
# ask for a paper title from next speaker, run every Thursday
taskscheduler_create(
taskname="ask_speaker",
rscript=paste0(rootdir,"/askSpeaker.R"),
schedule="WEEKLY",
starttime="08:29",
startdate="04/15/2021",
days="THU",
Rexe=file.path(Sys.getenv("R_HOME"),"bin","Rscript.exe")
)
taskscheduler_stop("ask_speaker")
taskscheduler_delete("ask_speaker")
help(set.env)
environment()
# first check if there is any seminar scheduled within the next 10 days & if paper title is empty
source("setGmailConfig.R")
environment(seminar_schedule)
seminar_schedule
environment("setGmailConfig.R")
# master
### I will run this code in Windows
### If you want to run this code in Mac, use the package "cronR"
# load libraries
#install.packages(taskscheduleR)
library(taskscheduleR)
library(gmailr)
library(googlesheets4)
library(rstudioapi)
# set directory to current folder
rootdir <- dirname(getSourceEditorContext()$path)
setwd(rootdir)
### our applied micro seminar is every Wednesday
# ask for a paper title from next speaker, run every Thursday
taskscheduler_create(
taskname="ask_speaker",
rscript=paste0(rootdir,"/askSpeaker.R"),
schedule="WEEKLY",
starttime="08:40",
startdate="04/15/2021",
days="THU",
Rexe=file.path(Sys.getenv("R_HOME"),"bin","Rscript.exe")
)
taskscheduler_stop("ask_speaker")
taskscheduler_delete("ask_speaker")
# ask for a paper title from next speaker, run every Thursday
taskscheduler_create(
taskname="ask_speaker",
rscript=paste0(rootdir,"/askSpeaker.R"),
schedule="WEEKLY",
starttime="08:42",
startdate="04/15/2021",
days="THU",
Rexe=file.path(Sys.getenv("R_HOME"),"bin","Rscript.exe")
)
environment()
# first check if there is any seminar scheduled within the next 10 days & if paper title is empty
source("setGmailConfig.R",env=.GlobalEnv)
# first check if there is any seminar scheduled within the next 10 days & if paper title is empty
source("setGmailConfig.R",environment=.GlobalEnv)
help(source)
source("setGmailConfig.R",.GlobalEnv)
### Stop running the code by running the following lines after the semester ends
taskscheduler_stop("ask_speaker")
taskscheduler_delete("ask_speaker")
# ask for a paper title from next speaker, run every Thursday
taskscheduler_create(
taskname="ask_speaker",
rscript=paste0(rootdir,"/askSpeaker.R"),
schedule="WEEKLY",
starttime="08:44",
startdate="04/15/2021",
days="THU",
Rexe=file.path(Sys.getenv("R_HOME"),"bin","Rscript.exe")
)
# set directory to current folder
rootdir <- dirname(getSourceEditorContext()$path)
setwd(rootdir)
# first check if there is any seminar scheduled within the next 10 days & if paper title is empty
source("setGmailConfig.R",.GlobalEnv)
# if there is a seminar scheduled within the next 7 days, send an email to the speaker to ask the paper title and the draft
if (daysleft[ind]<=7 & daysleft[ind]>=1 & is.na(seminar_schedule$PaperTitle[ind])){
msg_heading <- paste0("Dear Professor ",speaker_name,", \n\n")
### feel free to modify the email text body, msg_body
msg_body <- "Can you please send me your paper title (and your paper copy if it is available) at your earliest convenience? \nI will look forward to meeting you soon at the JHU Applied Micro seminar.\n"
msg_end <- paste0("Best,\n",organizer_name)
msg <- paste0(msg_heading,msg_body,msg_end)
### set a correct receiver email address inside gm_to()
emailmsg <- gm_mime() %>%
gm_to(speaker_email) %>%
gm_from(organizer_email) %>%
gm_subject("JHU Applied Micro Seminar Paper Title") %>%
gm_text_body(msg)
### send an email
gm_send_message(emailmsg)
}
taskscheduler_stop("ask_speaker")
taskscheduler_delete("ask_speaker")
# ask for a paper title from next speaker, run every Thursday
taskscheduler_create(
taskname="ask_speaker",
rscript=paste0(rootdir,"/askSpeaker.R"),
schedule="WEEKLY",
starttime="08:47",
startdate="04/15/2021",
days="THU",
Rexe=file.path(Sys.getenv("R_HOME"),"bin","Rscript.exe")
)
### Stop running the code by running the following lines after the semester ends
taskscheduler_stop("ask_speaker")
taskscheduler_delete("ask_speaker")
### I recommend to check first whether you can run the following configuration without any errors
source("setGmailConfig.R")
# ask for a paper title from next speaker, run every Thursday
taskscheduler_create(
taskname="ask_speaker",
rscript=paste0(rootdir,"/askSpeaker.R"),
schedule="WEEKLY",
starttime="08:49",
startdate="04/15/2021",
days="THU",
Rexe=file.path(Sys.getenv("R_HOME"),"bin","Rscript.exe")
)
### Stop running the code by running the following lines after the semester ends
taskscheduler_stop("ask_speaker")
taskscheduler_delete("ask_speaker")
help(gm_auth_configure)
library(gmailr)
help(gm_auth_configure)
### set a directory for a Gmail Client ID json file
#FILEDIR="/Users/yujung/Dropbox/Document/GoogleAPI/"
FILEDIR="C:/Users/yhwang18/Dropbox/Document/GoogleAPI/"
### set a filename for the json file
FILENAME="gmailr.json"
# configure Gmail API
gm_auth_configure(path=paste0(FILEDIR,FILENAME))
### I recommend to check first whether you can run the following configuration without any errors
source("setGmailConfig.R",.GlobalEnv)
#install.packages(taskscheduleR)
library(taskscheduleR)
library(gmailr)
library(googlesheets4)
library(rstudioapi)
# set directory to current folder
rootdir <- dirname(getSourceEditorContext()$path)
setwd(rootdir)
### I recommend to check first whether you can run the following configuration without any errors
source("setGmailConfig.R",.GlobalEnv)
help(read_sheet)
sheets_auth(email=organizer_email)
gs4_auth(email=organizer_email)
# master
### I will run this code in Windows
### If you want to run this code in Mac, use the package "cronR"
# load libraries
#install.packages(taskscheduleR)
library(taskscheduleR)
library(gmailr)
library(googlesheets4)
library(rstudioapi)
# set directory to current folder
rootdir <- dirname(getSourceEditorContext()$path)
setwd(rootdir)
### I recommend to check first whether you can run the following configuration without any errors
source("setGmailConfig.R",.GlobalEnv)
help("gs4_auth")
gs4_auth()
gs4_auth(email="yujungghwang@mail.com")
### set a directory for a Gmail Client ID json file
#FILEDIR="/Users/yujung/Dropbox/Document/GoogleAPI/"
FILEDIR="C:/Users/yhwang18/Dropbox/Document/GoogleAPI/"
### set a filename for the json file
FILENAME="gmailr.json"
# configure Gmail API
gm_auth_configure(path=paste0(FILEDIR,FILENAME))
### read seminar schedule info (CHANGE THE SPREADSHEET LINK BELOW)
### set a directory for Google Sheet API json file
FILENAME="GoogleSheetAPI.json"
gs4_auth(path=paste0(FILEDIR,FILENAME))
### Set organizer / audience information
### Organizer first name
organizer_name="Yujung"
### Organizer email address
organizer_email ="yujungghwang@gmail.com"
### Audience email
audience_email ="yujungghwang@gmail.com"
### Zoom link for the seminar
zoom_link="https://zoom.us/my/yhwang"
### Zoom link to meet the speaker one-to-one
meeting_link="https://zoom.us/my/yhwang"
### sign up information
signup_link ="https://docs.google.com/spreadsheets/d/11HCLZPHPx0j0ILhy3w8u5QAiPk1SD8paJdbgVzPJSm0/edit#gid=0"
grad_signup_time ="Monday 10AM"
### set a directory for a Gmail Client ID json file
#FILEDIR="/Users/yujung/Dropbox/Document/GoogleAPI/"
FILEDIR="C:/Users/yhwang18/Dropbox/Document/GoogleAPI/"
### set a filename for the json file
FILENAME="gmailr.json"
# configure Gmail API
gm_auth_configure(path=paste0(FILEDIR,FILENAME))
### read seminar schedule info (CHANGE THE SPREADSHEET LINK BELOW)
### set a directory for Google Sheet API json file
FILENAME="GoogleSheetAPI.json"
gs4_auth(email=organizer_email,path=paste0(FILEDIR,FILENAME))
# master
### I will run this code in Windows
### If you want to run this code in Mac, use the package "cronR"
# load libraries
#install.packages(taskscheduleR)
library(taskscheduleR)
library(gmailr)
library(googlesheets4)
library(rstudioapi)
# set directory to current folder
rootdir <- dirname(getSourceEditorContext()$path)
setwd(rootdir)
### I recommend to check first whether you can run the following configuration without any errors
source("setGmailConfig.R",.GlobalEnv)
# master
### I will run this code in Windows
### If you want to run this code in Mac, use the package "cronR"
# load libraries
#install.packages(taskscheduleR)
library(taskscheduleR)
library(gmailr)
library(googlesheets4)
library(rstudioapi)
# set directory to current folder
rootdir <- dirname(getSourceEditorContext()$path)
setwd(rootdir)
### I recommend to check first whether you can run the following configuration without any errors
source("setGmailConfig.R")
# ask for a paper title from next speaker, run every Thursday
taskscheduler_create(
taskname="ask_speaker",
rscript=paste0(rootdir,"/askSpeaker.R"),
schedule="WEEKLY",
starttime="09:11",
startdate="04/15/2021",
days="THU",
Rexe=file.path(Sys.getenv("R_HOME"),"bin","Rscript.exe")
)
### Set organizer / audience information
### Organizer first name
organizer_name="Yujung"
### Organizer email address
organizer_email ="yujungghwang@gmail.com"
### Audience email
audience_email ="yujungghwang@gmail.com"
### Zoom link for the seminar
zoom_link="https://zoom.us/my/yhwang"
### Zoom link to meet the speaker one-to-one
meeting_link="https://zoom.us/my/yhwang"
### sign up information
signup_link ="https://docs.google.com/spreadsheets/d/11HCLZPHPx0j0ILhy3w8u5QAiPk1SD8paJdbgVzPJSm0/edit#gid=0"
grad_signup_time ="Monday 10AM"
### set a directory for a Gmail Client ID json file
#FILEDIR="/Users/yujung/Dropbox/Document/GoogleAPI/"
FILEDIR="C:/Users/yhwang18/Dropbox/Document/GoogleAPI/"
### set a filename for the json file
FILENAME="gmailr.json"
# configure Gmail API
gm_auth_configure(path=paste0(FILEDIR,FILENAME))
### read seminar schedule info (CHANGE THE SPREADSHEET LINK BELOW)
### set a directory for Google Sheet API json file
FILENAME="GoogleSheetAPI.json"
gs4_auth(email=organizer_email,path=paste0(FILEDIR,FILENAME))
seminar_schedule_link <- "https://docs.google.com/spreadsheets/d/1TVZpmKuRcB2IbOgfgtGQvebvVEMMS8LoNHuEvh30EU8/edit#gid=0"
seminar_schedule <- read_sheet(seminar_schedule_link)
# compute the days until the next seminar
daysleft <- as.Date(seminar_schedule$Date) - Sys.Date()
ind <- which(daysleft>=0)[1]
### retrieve the next speaker information
### seminar speaker name
speaker_name =seminar_schedule$Speaker[ind]
### speaker email
speaker_email =seminar_schedule$Email[ind]
### speaker institution
speaker_institution =seminar_schedule$Institution[ind]
### paper title
paper_title =seminar_schedule$PaperTitle[ind]
### paper link
paper_link =seminar_schedule$PaperLink[ind]
### seminar date and time
seminar_date=seminar_schedule$Date[ind]
seminar_time=seminar_schedule$Time[ind]
### Stop running the code by running the following lines after the semester ends
taskscheduler_stop("ask_speaker")
taskscheduler_delete("ask_speaker")
# master
### I will run this code in Windows
### If you want to run this code in Mac, use the package "cronR"
# load libraries
#install.packages(taskscheduleR)
library(taskscheduleR)
library(gmailr)
library(googlesheets4)
library(rstudioapi)
# set directory to current folder
rootdir <- dirname(getSourceEditorContext()$path)
setwd(rootdir)
source("askSpeaker.R")
help(gm_auth_configure)
gm_auth_configure(email=organizer_email,path=paste0(FILEDIR,FILENAME))
gm_auth_configure(email=organizer_email,path=paste0(FILEDIR,FILENAME))
# master
### I will run this code in Windows
### If you want to run this code in Mac, use the package "cronR"
# load libraries
#install.packages(taskscheduleR)
library(taskscheduleR)
library(gmailr)
library(googlesheets4)
library(rstudioapi)
# set directory to current folder
rootdir <- dirname(getSourceEditorContext()$path)
setwd(rootdir)
source("askSpeaker.R")
### I recommend to check first whether you can run the following configuration without any errors
source("setGmailConfig.R")
# master
### I will run this code in Windows
### If you want to run this code in Mac, use the package "cronR"
# load libraries
#install.packages(taskscheduleR)
library(taskscheduleR)
library(gmailr)
library(googlesheets4)
library(rstudioapi)
# set directory to current folder
rootdir <- dirname(getSourceEditorContext()$path)
setwd(rootdir)
source("askSpeaker.R")
### set a directory for a Gmail Client ID json file
#FILEDIR="/Users/yujung/Dropbox/Document/GoogleAPI/"
FILEDIR="C:/Users/yhwang18/Dropbox/Document/GoogleAPI/"
### set a filename for the json file
FILENAME="gmailr.json"
# configure Gmail API
gm_auth_configure(path=paste0(FILEDIR,FILENAME))
options(
gargle_oauth_cache = ".secret",
gargle_oauth_email=organizer_email
)
gm_auth(email=organizer_email)
# master
### I will run this code in Windows
### If you want to run this code in Mac, use the package "cronR"
# load libraries
#install.packages(taskscheduleR)
library(taskscheduleR)
library(gmailr)
library(googlesheets4)
library(rstudioapi)
# set directory to current folder
rootdir <- dirname(getSourceEditorContext()$path)
setwd(rootdir)
### I recommend to check first whether you can run the following configuration without any errors
source("setGmailConfig.R")
# load libraries
#install.packages(taskscheduleR)
library(taskscheduleR)
library(gmailr)
library(googlesheets4)
library(rstudioapi)
# set directory to current folder
rootdir <- dirname(getSourceEditorContext()$path)
setwd(rootdir)
### I recommend to check first whether you can run the following configuration without any errors
source("setGmailConfig.R")
# master
### I will run this code in Windows
### If you want to run this code in Mac, use the package "cronR"
# load libraries
#install.packages(taskscheduleR)
library(taskscheduleR)
library(gmailr)
library(googlesheets4)
library(rstudioapi)
# set directory to current folder
rootdir <- dirname(getSourceEditorContext()$path)
setwd(rootdir)
source("askSpeaker.R")
# master
### I will run this code in Windows
### If you want to run this code in Mac, use the package "cronR"
# load libraries
#install.packages(taskscheduleR)
library(taskscheduleR)
library(gmailr)
library(googlesheets4)
library(rstudioapi)
# set directory to current folder
rootdir <- dirname(getSourceEditorContext()$path)
setwd(rootdir)
### I recommend to check first whether you can run the following configuration without any errors
source("setGmailConfig.R")
# master
### I will run this code in Windows
### If you want to run this code in Mac, use the package "cronR"
# load libraries
#install.packages(taskscheduleR)
library(taskscheduleR)
library(gmailr)
library(googlesheets4)
library(rstudioapi)
# set directory to current folder
rootdir <- dirname(getSourceEditorContext()$path)
setwd(rootdir)
source("askSpeaker.R")
# ask for a paper title from next speaker, run every Thursday
taskscheduler_create(
taskname="ask_speaker",
rscript=paste0(rootdir,"/askSpeaker.R"),
schedule="WEEKLY",
starttime="09:27",
startdate="04/15/2021",
days="THU",
Rexe=file.path(Sys.getenv("R_HOME"),"bin","Rscript.exe")
)
### Stop running the code by running the following lines after the semester ends
taskscheduler_stop("ask_speaker")
taskscheduler_delete("ask_speaker")
# ask for a paper title from next speaker, run every Thursday
taskscheduler_create(
taskname="ask_speaker",
rscript=paste0(rootdir,"/askSpeaker.R"),
schedule="WEEKLY",
starttime="09:29",
startdate="04/15/2021",
days="THU",
Rexe=file.path(Sys.getenv("R_HOME"),"bin","Rscript.exe")
)
### Stop running the code by running the following lines after the semester ends
taskscheduler_stop("ask_speaker")
taskscheduler_delete("ask_speaker")
oragnizer_email
organizer_email
gm_default_email()
# load libraries
#install.packages(taskscheduleR)
library(taskscheduleR)
library(gmailr)
library(googlesheets4)
library(rstudioapi)
# set directory to current folder
rootdir <- dirname(getSourceEditorContext()$path)
setwd(rootdir)
### I recommend to check first whether you can run the following configuration without any errors
source("setGmailConfig.R")
# master
### I will run this code in Windows
### If you want to run this code in Mac, use the package "cronR"
# load libraries
#install.packages(taskscheduleR)
library(taskscheduleR)
library(gmailr)
library(googlesheets4)
library(rstudioapi)
# set directory to current folder
rootdir <- dirname(getSourceEditorContext()$path)
setwd(rootdir)
source("askSpeaker.R")
help("taskscheduler_create")
# ask for a paper title from next speaker, run every Thursday
taskscheduler_create(
taskname="ask_speaker",
rscript=paste0(rootdir,"/askSpeaker.R"),
schedule="WEEKLY",
starttime="09:38",
startdate="04/15/2021",
days="THU",
Rexe=file.path(Sys.getenv("R_HOME"),"bin","Rscript.exe")
)
### Stop running the code by running the following lines after the semester ends
taskscheduler_stop("ask_speaker")
taskscheduler_delete("ask_speaker")
### I recommend to check first whether you can run the following configuration without any errors
source("setGmailConfig.R")
